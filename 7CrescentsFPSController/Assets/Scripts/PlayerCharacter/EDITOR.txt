
//#if UNITY_EDITOR
using UnityEditor;
//#endif

/*****************************************************************************************/
/*********************--------------------------------------------************************/
/*****************************************************************************************/

//// Custom Editor
//#if UNITY_EDITOR
//[CustomEditor(typeof(FakePersonController)), InitializeOnLoadAttribute]
//public class FakePersonControllerEditor : Editor
//{
//    FakePersonController fpc;
//    SerializedObject SerFPC;

//    private void OnEnable()
//    {
//        fpc = (FakePersonController)target;
//        SerFPC = new SerializedObject(fpc);
//    }

//    public override void OnInspectorGUI()
//    {
//        SerFPC.Update();

//        EditorGUILayout.Space();
//        GUILayout.Label("Fake Person Controller", new GUIStyle(GUI.skin.label)
//        { alignment = TextAnchor.MiddleCenter, fontStyle = FontStyle.Bold, fontSize = 16 });
//        GUILayout.Label("By Erkan Yaprak", new GUIStyle(GUI.skin.label)
//        { alignment = TextAnchor.MiddleCenter, fontStyle = FontStyle.Normal, fontSize = 12 });
//        GUILayout.Label("version 0.0.1", new GUIStyle(GUI.skin.label)
//        { alignment = TextAnchor.MiddleCenter, fontStyle = FontStyle.Normal, fontSize = 12 });
//        EditorGUILayout.Space();

//        #region Camera Setup

//        EditorGUILayout.LabelField("", GUI.skin.horizontalSlider);
//        GUILayout.Label("Kamera Ayarları", new GUIStyle(GUI.skin.label)
//        { alignment = TextAnchor.MiddleCenter, fontStyle = FontStyle.Bold, fontSize = 13 },
//        GUILayout.ExpandWidth(true));
//        EditorGUILayout.Space();

//        fpc.playerCamera = (Camera)EditorGUILayout.ObjectField(new
//            GUIContent("Kamera", "Oyuncunun altındaki kamera"),
//            fpc.playerCamera, typeof(Camera), true);

//        fpc.fieldOfView = EditorGUILayout.Slider(new
//            GUIContent("Görüş Açısı", "Kamera' nın görüş açısı " +
//            "Oyuncu kamerasını değiştirir"), fpc.fieldOfView, fpc.zoomFOV, 179f);

//        fpc.cameraCanMove = EditorGUILayout.ToggleLeft(new GUIContent("Kamera Dönüşünü Aktif Eder",
//            "Kameranın hareket etmesine izin verilip verilmeyeceğini belirler."), fpc.cameraCanMove);

//        GUI.enabled = fpc.cameraCanMove;
//        fpc.invertCamera = EditorGUILayout.ToggleLeft(new GUIContent("Kamera Dönüşünü Ters Çevir",
//            "Kameranın yukarı ve aşağı hareketini tersine çevirir."), fpc.invertCamera);

//        fpc.mouseSensitivity = EditorGUILayout.Slider(new GUIContent("Bakma Hassasiyeti",
//            "Fare hareketinin ne kadar hassas olduğunu belirler."), fpc.mouseSensitivity, .1f, 10f);

//        fpc.maxLookAngle = EditorGUILayout.Slider(new GUIContent("Maksimum Bakış Açısı",
//            "Oyuncu kamerasının bakabileceği maksimum ve minimum açıyı belirler."),
//            fpc.maxLookAngle, 40, 90);
//        GUI.enabled = true;

//        fpc.lockCursor = EditorGUILayout.ToggleLeft(new GUIContent("İmleci Kilitle ve Gizle",
//            "İmleç görünürlüğünü kapatır ve ekranın ortasına kilitler."),
//            fpc.lockCursor);

//        fpc.crosshair = EditorGUILayout.ToggleLeft(new GUIContent("Otomatik Crosshair",
//            "Temel crosshairin açılıp açılmayacağını belirler ve ekranın ortasına ayarlar."),
//            fpc.crosshair);

//        // Yalnızca Crosshair aktifse görünür
//        //if (fpc.crosshair)
//        //{
//        //    EditorGUI.indentLevel++;
//        //    EditorGUILayout.BeginHorizontal();
//        //    EditorGUILayout.PrefixLabel(new GUIContent("Crosshair Görseli",
//        //        "Crosshair olarak kullanılacak Sprite"));
//        //    EditorGUILayout.EndHorizontal();

//        //    EditorGUILayout.BeginHorizontal();
//        //    EditorGUILayout.EndHorizontal();
//        //    EditorGUI.indentLevel--;
//        //}

//        EditorGUILayout.Space();

//        #region Camera Zoom Setup

//        GUILayout.Label("Yakınlaştırma", new GUIStyle(GUI.skin.label)
//        {
//            alignment = TextAnchor.MiddleLeft,
//            fontStyle = FontStyle.Bold,
//            fontSize = 13
//        }, GUILayout.ExpandWidth(true));

//        //fpc.enableZoom = EditorGUILayout.ToggleLeft(new GUIContent("Yakınlaştırmayı Etkinleştir",
//        //    "Oyuncunun oynarken yakınlaştırma yapıp yapamayacağını belirler."), fpc.enableZoom);

//        //GUI.enabled = fpc.enableZoom;
//        fpc.holdToZoom = EditorGUILayout.ToggleLeft(new GUIContent("Yakınlaştırma İçin Basılı Tut",
//            "Yakınlaştırmak ve yakınlaştırmayı tutmak için oyuncunun yakınlaştırma" +
//            " tuşunu basılı tutmasını gerektirir."),
//            fpc.holdToZoom);

//        fpc.zoomKey = (KeyCode)EditorGUILayout.EnumPopup(new GUIContent("Yakınlaştırma Tuşu",
//            "Yakınlaştırmak için hangi tuşun kullanılacağını belirler."), fpc.zoomKey);

//        fpc.zoomFOV = EditorGUILayout.Slider(new GUIContent("Yakınlaştırma Görüş Açısı",
//            "Kameranın yakınlaştırıldığında görüş alanını belirler."),
//            fpc.zoomFOV, .1f, fpc.fieldOfView);

//        fpc.zoomStepTime = EditorGUILayout.Slider(new GUIContent("Yakınlaştırma Süresi",
//            "Yakınlaştırma sırasında Görüş Açıları arası geçişlerinin ne kadar hızlı" +
//            " olacağını belirler."), fpc.zoomStepTime, .1f, 10f);
//        GUI.enabled = true;

//        #endregion

//        #endregion

//        #region Movement Setup

//        EditorGUILayout.LabelField("", GUI.skin.horizontalSlider);
//        GUILayout.Label("Hareket Ayarları", new GUIStyle(GUI.skin.label)
//        { alignment = TextAnchor.MiddleCenter, fontStyle = FontStyle.Bold, fontSize = 13 },
//        GUILayout.ExpandWidth(true));

//        EditorGUILayout.Space();

//        fpc.playerCanMove = EditorGUILayout.ToggleLeft(new GUIContent("Oyuncu Hareketini Etkinleştir",
//            "Oyuncunun hareket etmesine izin verilip verilmeyeceğini belirler."), fpc.playerCanMove);

//        GUI.enabled = fpc.playerCanMove;

//        fpc.walkSpeed = EditorGUILayout.Slider(new GUIContent("Yürüme Hızı",
//            "Yürürken oyuncunun ne kadar hızlı hareket edeceğini belirler."),
//            fpc.walkSpeed, .1f, fpc.sprintSpeed);

//        GUI.enabled = true;

//        EditorGUILayout.Space();

//        #region Sprint

//        GUILayout.Label("Sürat", new GUIStyle(GUI.skin.label)
//        { alignment = TextAnchor.MiddleLeft, fontStyle = FontStyle.Bold, fontSize = 13 },
//        GUILayout.ExpandWidth(true));

//        //fpc.enableSprint = EditorGUILayout.ToggleLeft(new GUIContent("Sürat' i Aktifleştir",
//        //    "Oyuncunun koşmasına izin verilip verilmeyeceğini belirler."), fpc.enableSprint);

//        //GUI.enabled = fpc.enableSprint;
//        fpc.unlimitedSprint = EditorGUILayout.ToggleLeft(new GUIContent("Sınırsız Sürat",
//            "'Sürat Süresi'nin etkin olup olmadığını belirler." +
//            " Bunu açmak, sınırsız sürat koşusuna izin verecektir."), fpc.unlimitedSprint);

//        fpc.sprintKey = (KeyCode)EditorGUILayout.EnumPopup(new GUIContent("Sürat Tuşu",
//            "Sürat için hangi tuşun kullanılacağını belirler"), fpc.sprintKey);

//        fpc.sprintSpeed = EditorGUILayout.Slider(new GUIContent("Sürat Hızı",
//            "Oyuncunun süratli iken ne kadar hızlı hareket edeceğini belirler."),
//            fpc.sprintSpeed, fpc.walkSpeed, 20f);

//        GUI.enabled = !fpc.unlimitedSprint;
//        fpc.sprintDuration = EditorGUILayout.Slider(new GUIContent("Sürat Süresi",
//            "Sınırsız sürat devre dışıyken oyuncunun ne kadar süre sürat yapabileceğini belirler."),
//            fpc.sprintDuration, 1f, 20f);

//        fpc.sprintCooldown = EditorGUILayout.Slider(new GUIContent("Süret Bekleme Süresi",
//            "Oyuncunun sürat süresi bittiğinde ne kadar zaman sonra tekrar sürat yapabileceğini belirler"),
//            fpc.sprintCooldown, .1f, fpc.sprintDuration);
//        GUI.enabled = true;

//        fpc.sprintFOV = EditorGUILayout.Slider(new GUIContent("Sürat Görüş Açısı",
//            "Sprint sırasında kameranın görüş alanını belirler."),
//            fpc.sprintFOV, fpc.fieldOfView, 179f);

//        fpc.sprintFOVStepTime = EditorGUILayout.Slider(new GUIContent("Yakınlaştırma Süresi",
//            "Yakınlaştırma sırasında Görüş Açıları arası geçişlerinin ne kadar hızlı" +
//            " olacağını belirler."),
//            fpc.sprintFOVStepTime, .1f, 20f);

//        //fpc.useSprintBar = EditorGUILayout.ToggleLeft(new GUIContent("Sürat Bar' ı Kullan",
//        //    "Varsayılan sürat barının ekranda görünüp görünmeyeceğini belirler."), fpc.useSprintBar);

//        //// Yalnızca sprint çubuğu etkinleştirilmişse görünür
//        //if (fpc.useSprintBar)
//        //{
//            EditorGUI.indentLevel++;

//            EditorGUILayout.BeginHorizontal();
//            fpc.hideBarWhenFull = EditorGUILayout.ToggleLeft(new GUIContent("Tam Çubuğu Gizle",
//                "Sürat süresi dolduğunda sürat barını gizler ve sürat yaparken barı soluklaştırır. " +
//                "Bunu devre dışı bırakmak, barın her zaman ekranda kalmasına neden olur." +
//                " Sürat barı etkinleştirildi."), fpc.hideBarWhenFull);
//            EditorGUILayout.EndHorizontal();

//            EditorGUILayout.BeginHorizontal();
//            EditorGUILayout.PrefixLabel(new GUIContent("Bar Arkaplanı",
//                "Sürat Barı arka planı olarak kullanılacak nesne."));

//            fpc.sprintBarBG = (Image)EditorGUILayout.ObjectField(fpc.sprintBarBG,
//            typeof(Image), true);

//            EditorGUILayout.EndHorizontal();

//            EditorGUILayout.BeginHorizontal();
//            EditorGUILayout.PrefixLabel(new GUIContent("Bar", "Sürat Barı olarak kullanılacak nesne"));

//            fpc.sprintBar = (Image)EditorGUILayout.ObjectField(fpc.sprintBar, typeof(Image), true);

//            EditorGUILayout.EndHorizontal();


//            EditorGUILayout.BeginHorizontal();
//            fpc.sprintBarWidthPercent = EditorGUILayout.Slider(new GUIContent("Bar Genişliği",
//                "Barın genişliğini belirtir"), fpc.sprintBarWidthPercent, .1f, .5f);
//            EditorGUILayout.EndHorizontal();

//            EditorGUILayout.BeginHorizontal();
//            fpc.sprintBarHeightPercent = EditorGUILayout.Slider(new GUIContent("Bar Yüksekliği",
//                "Barın yüksekliğini belirtir"), fpc.sprintBarHeightPercent, .001f, .025f);
//            EditorGUILayout.EndHorizontal();
//            EditorGUI.indentLevel--;
//        //}
//        GUI.enabled = true;

//        EditorGUILayout.Space();

//        #endregion

//        #region Jump

//        GUILayout.Label("Zıplama Ayarları", new GUIStyle(GUI.skin.label)
//        { alignment = TextAnchor.MiddleLeft, fontStyle = FontStyle.Bold, fontSize = 13 },
//        GUILayout.ExpandWidth(true));

//        //fpc.enableJump = EditorGUILayout.ToggleLeft(new GUIContent("Zıplamayı Aktifleştir",
//        //    "Oyuncunun zıplamasına izin verilip verilmeyeceğini belirler."), fpc.enableJump);

//        //GUI.enabled = fpc.enableJump;
//        fpc.jumpKey = (KeyCode)EditorGUILayout.EnumPopup(new GUIContent("Zıplama Tuşu",
//            "Zıplamak için hangi tuşun kullanılacağını belirler"), fpc.jumpKey);

//        fpc.jumpPower = EditorGUILayout.Slider(new GUIContent("Zıplama Gücü",
//            "Oyuncunun ne kadar yükseğe zıplayacağını belirler."), fpc.jumpPower, .1f, 20f);
//        GUI.enabled = true;

//        EditorGUILayout.Space();

//        #endregion

//        #region Crouch

//        GUILayout.Label("Çökme/Eğilme", new GUIStyle(GUI.skin.label)
//        { alignment = TextAnchor.MiddleLeft, fontStyle = FontStyle.Bold, fontSize = 13 },
//        GUILayout.ExpandWidth(true));

//        //fpc.enableCrouch = EditorGUILayout.ToggleLeft(new GUIContent("Çökme/Eğilme 'yi aktifleştir",
//        //    "Oyuncunun çökme/eğilme yapıp yapamayacağını belirler"), fpc.enableCrouch);

//        //GUI.enabled = fpc.enableCrouch;

//        fpc.holdToCrouch = EditorGUILayout.ToggleLeft(new GUIContent("Çökme/Eğilme için Basılı Tut",
//            "Çökme/Eğilme için ve o halde kalmak için oyuncunun çökme/eğilme" +
//            " tuşunu basılı tutmasını gerektirir."),
//            fpc.holdToCrouch);

//        fpc.crouchKey = (KeyCode)EditorGUILayout.EnumPopup(new GUIContent("Çökme/Eğilme Tuşu",
//            "Çömelmek için hangi tuşun kullanılacağını belirler"), fpc.crouchKey);

//        fpc.crouchHeight = EditorGUILayout.Slider(new GUIContent("Çökme/Eğilme Yüksekliği",
//            "Çökme/Eğilme anında oyuncunun boyunu belirler."), fpc.crouchHeight, .1f, 1);

//        fpc.speedReduction = EditorGUILayout.Slider(new GUIContent("Hız Azaltma",
//            "'Yürüme Hızı'nın azaltıldığı yüzdeyi belirler. 1 azalma yok ve 0,5 ise yarım."),
//            fpc.speedReduction, .1f, 1);
//        GUI.enabled = true;

//        #endregion

//        #endregion

//        #region Head Bob

//        EditorGUILayout.Space();
//        EditorGUILayout.LabelField("", GUI.skin.horizontalSlider);
//        GUILayout.Label("Kafa Sallanması (Kamera Yürüme Efekti)", new GUIStyle(GUI.skin.label)
//        { alignment = TextAnchor.MiddleCenter, fontStyle = FontStyle.Bold, fontSize = 13 },
//        GUILayout.ExpandWidth(true));
//        EditorGUILayout.Space();

//        fpc.enableHeadBob = EditorGUILayout.ToggleLeft(new GUIContent("Kafa Sallanmasını Aktifleştir",
//            "Oyuncu yürürken kameranın sallanıp sallanmayacağını belirler."), fpc.enableHeadBob);


//        GUI.enabled = fpc.enableHeadBob;

//        fpc.joint = (Transform)EditorGUILayout.ObjectField(new GUIContent("Kamera Bağlantısı",
//            "***"), fpc.joint,
//            typeof(Transform), true);

//        fpc.bobSpeed = EditorGUILayout.Slider(new GUIContent("Kafa SAllanma Hızı",
//            "Kafa sallanması halinde kamera sallanma hızını belirler"), fpc.bobSpeed, 1, 20);

//        fpc.bobAmount = EditorGUILayout.Vector3Field(new GUIContent("Kafa SAllanma Ömiktarı",
//            "Kafanın her iki yönde ne kadar hareket edeceğini belirler"),
//            fpc.bobAmount);

//        GUI.enabled = true;

//        #endregion        
//        if (GUI.changed)
//        {
//            EditorUtility.SetDirty(fpc);
//            Undo.RecordObject(fpc, "FPC Change");
//            SerFPC.ApplyModifiedProperties();
//        }
//    }

//}

//#endif